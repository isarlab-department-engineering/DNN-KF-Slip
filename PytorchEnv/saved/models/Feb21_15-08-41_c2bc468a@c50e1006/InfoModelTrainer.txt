######################################################################################################################

# Load NN
input_dim = 100
output_dim = 1
model = Med2021(input_size=input_dim, output_size=output_dim)
model.to(device)
learning_rate = 0.001
num_epochs = 100
save_epoch_interval = 10
alpha_decay = 0.0001
# loss, optimizer
criterion = nn.MSELoss()
#optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9, nesterov=True,
   #                         weight_decay=learning_rate*alpha_decay)
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=learning_rate*alpha_decay )


######################################################################################################################


class Med2020(BaseModel):
    def __init__(self, input_size, output_size):
        super(BaseModel, self).__init__()

        self.l1 = nn.Linear(input_size, 250)
        self.l2 = nn.Linear(250, 250)
        self.l3 = nn.Linear(250, output_size)

    def forward(self, x):
        out = self.l1(x)
        out = F.relu(out)
        out = self.l2(out)
        out = F.relu(out)
        out = self.l3(out)
        return out